// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package qsd

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// QsdServiceClient is the client API for QsdService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type QsdServiceClient interface {
	CreateVolume(ctx context.Context, in *Image, opts ...grpc.CallOption) (*Response, error)
	ExposeVhostUser(ctx context.Context, in *Image, opts ...grpc.CallOption) (*Response, error)
}

type qsdServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewQsdServiceClient(cc grpc.ClientConnInterface) QsdServiceClient {
	return &qsdServiceClient{cc}
}

func (c *qsdServiceClient) CreateVolume(ctx context.Context, in *Image, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/alicefr.csi.pkg.qsd.QsdService/CreateVolume", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *qsdServiceClient) ExposeVhostUser(ctx context.Context, in *Image, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/alicefr.csi.pkg.qsd.QsdService/ExposeVhostUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// QsdServiceServer is the server API for QsdService service.
// All implementations must embed UnimplementedQsdServiceServer
// for forward compatibility
type QsdServiceServer interface {
	CreateVolume(context.Context, *Image) (*Response, error)
	ExposeVhostUser(context.Context, *Image) (*Response, error)
	mustEmbedUnimplementedQsdServiceServer()
}

// UnimplementedQsdServiceServer must be embedded to have forward compatible implementations.
type UnimplementedQsdServiceServer struct {
}

func (UnimplementedQsdServiceServer) CreateVolume(context.Context, *Image) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateVolume not implemented")
}
func (UnimplementedQsdServiceServer) ExposeVhostUser(context.Context, *Image) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ExposeVhostUser not implemented")
}
func (UnimplementedQsdServiceServer) mustEmbedUnimplementedQsdServiceServer() {}

// UnsafeQsdServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to QsdServiceServer will
// result in compilation errors.
type UnsafeQsdServiceServer interface {
	mustEmbedUnimplementedQsdServiceServer()
}

func RegisterQsdServiceServer(s grpc.ServiceRegistrar, srv QsdServiceServer) {
	s.RegisterService(&QsdService_ServiceDesc, srv)
}

func _QsdService_CreateVolume_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Image)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QsdServiceServer).CreateVolume(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/alicefr.csi.pkg.qsd.QsdService/CreateVolume",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QsdServiceServer).CreateVolume(ctx, req.(*Image))
	}
	return interceptor(ctx, in, info, handler)
}

func _QsdService_ExposeVhostUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Image)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QsdServiceServer).ExposeVhostUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/alicefr.csi.pkg.qsd.QsdService/ExposeVhostUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QsdServiceServer).ExposeVhostUser(ctx, req.(*Image))
	}
	return interceptor(ctx, in, info, handler)
}

// QsdService_ServiceDesc is the grpc.ServiceDesc for QsdService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var QsdService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "alicefr.csi.pkg.qsd.QsdService",
	HandlerType: (*QsdServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateVolume",
			Handler:    _QsdService_CreateVolume_Handler,
		},
		{
			MethodName: "ExposeVhostUser",
			Handler:    _QsdService_ExposeVhostUser_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "pkg/qsd/qsd.proto",
}
